package com.ping.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.huang.check_in.Audience;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "AUDIENCE".
*/
public class AudienceDao extends AbstractDao<Audience, String> {

    public static final String TABLENAME = "AUDIENCE";

    /**
     * Properties of entity Audience.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, String.class, "_id", true, "_ID");
        public final static Property Seat = new Property(1, String.class, "seat", false, "SEAT");
        public final static Property Count = new Property(2, int.class, "count", false, "COUNT");
    }


    public AudienceDao(DaoConfig config) {
        super(config);
    }
    
    public AudienceDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"AUDIENCE\" (" + //
                "\"_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: _id
                "\"SEAT\" TEXT NOT NULL ," + // 1: seat
                "\"COUNT\" INTEGER NOT NULL );"); // 2: count
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"AUDIENCE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Audience entity) {
        stmt.clearBindings();
 
        String _id = entity.get_id();
        if (_id != null) {
            stmt.bindString(1, _id);
        }
        stmt.bindString(2, entity.getSeat());
        stmt.bindLong(3, entity.getCount());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Audience entity) {
        stmt.clearBindings();
 
        String _id = entity.get_id();
        if (_id != null) {
            stmt.bindString(1, _id);
        }
        stmt.bindString(2, entity.getSeat());
        stmt.bindLong(3, entity.getCount());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public Audience readEntity(Cursor cursor, int offset) {
        Audience entity = new Audience( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // _id
            cursor.getString(offset + 1), // seat
            cursor.getInt(offset + 2) // count
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Audience entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setSeat(cursor.getString(offset + 1));
        entity.setCount(cursor.getInt(offset + 2));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Audience entity, long rowId) {
        return entity.get_id();
    }
    
    @Override
    public String getKey(Audience entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Audience entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
