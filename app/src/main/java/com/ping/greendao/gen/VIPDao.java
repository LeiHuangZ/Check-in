package com.ping.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.huang.check_in.VIP;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "VIP".
*/
public class VIPDao extends AbstractDao<VIP, String> {

    public static final String TABLENAME = "VIP";

    /**
     * Properties of entity VIP.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, String.class, "_id", true, "_ID");
        public final static Property Card_num = new Property(1, String.class, "card_num", false, "CARD_NUM");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Phone_num = new Property(3, String.class, "phone_num", false, "PHONE_NUM");
        public final static Property Identify = new Property(4, String.class, "identify", false, "IDENTIFY");
        public final static Property Seat = new Property(5, String.class, "seat", false, "SEAT");
        public final static Property IsCheck = new Property(6, boolean.class, "isCheck", false, "IS_CHECK");
        public final static Property Again = new Property(7, boolean.class, "again", false, "AGAIN");
    }


    public VIPDao(DaoConfig config) {
        super(config);
    }
    
    public VIPDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"VIP\" (" + //
                "\"_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: _id
                "\"CARD_NUM\" TEXT," + // 1: card_num
                "\"NAME\" TEXT," + // 2: name
                "\"PHONE_NUM\" TEXT," + // 3: phone_num
                "\"IDENTIFY\" TEXT NOT NULL ," + // 4: identify
                "\"SEAT\" TEXT," + // 5: seat
                "\"IS_CHECK\" INTEGER NOT NULL ," + // 6: isCheck
                "\"AGAIN\" INTEGER NOT NULL );"); // 7: again
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"VIP\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, VIP entity) {
        stmt.clearBindings();
 
        String _id = entity.get_id();
        if (_id != null) {
            stmt.bindString(1, _id);
        }
 
        String card_num = entity.getCard_num();
        if (card_num != null) {
            stmt.bindString(2, card_num);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String phone_num = entity.getPhone_num();
        if (phone_num != null) {
            stmt.bindString(4, phone_num);
        }
        stmt.bindString(5, entity.getIdentify());
 
        String seat = entity.getSeat();
        if (seat != null) {
            stmt.bindString(6, seat);
        }
        stmt.bindLong(7, entity.getIsCheck() ? 1L: 0L);
        stmt.bindLong(8, entity.getAgain() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, VIP entity) {
        stmt.clearBindings();
 
        String _id = entity.get_id();
        if (_id != null) {
            stmt.bindString(1, _id);
        }
 
        String card_num = entity.getCard_num();
        if (card_num != null) {
            stmt.bindString(2, card_num);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String phone_num = entity.getPhone_num();
        if (phone_num != null) {
            stmt.bindString(4, phone_num);
        }
        stmt.bindString(5, entity.getIdentify());
 
        String seat = entity.getSeat();
        if (seat != null) {
            stmt.bindString(6, seat);
        }
        stmt.bindLong(7, entity.getIsCheck() ? 1L: 0L);
        stmt.bindLong(8, entity.getAgain() ? 1L: 0L);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public VIP readEntity(Cursor cursor, int offset) {
        VIP entity = new VIP( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // _id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // card_num
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // phone_num
            cursor.getString(offset + 4), // identify
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // seat
            cursor.getShort(offset + 6) != 0, // isCheck
            cursor.getShort(offset + 7) != 0 // again
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, VIP entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setCard_num(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPhone_num(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIdentify(cursor.getString(offset + 4));
        entity.setSeat(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIsCheck(cursor.getShort(offset + 6) != 0);
        entity.setAgain(cursor.getShort(offset + 7) != 0);
     }
    
    @Override
    protected final String updateKeyAfterInsert(VIP entity, long rowId) {
        return entity.get_id();
    }
    
    @Override
    public String getKey(VIP entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(VIP entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
